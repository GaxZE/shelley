/**
 * Global helpers for a SMALL number of globals.
 * Perhaps the #a11y helpers are the only reasonable reason to use
 * such things.

 * FYI: a11y is shorthand for accessibility (count the letters a-y)
*/

/*
	.srOnly - Screen Reader Only 
	
	Quite often in web design we find situations where visually context can be drawn 
	form the visual context. Example: When we visually 'see' a link saying 'More information' 
	we can derive where that link might go foem the surrounding text/imagary.
	
	However, the visually impaired however will often navigate the screen by getting their screen
	reading software to collect up all the links on the page and read them out. 
	
	When choosing link text or building webpages we need have empathy for the way that 
	others will interact with our creations. Legally we need to as well unless you 
	are the type to not add an access ramp to a building. Who does that? Not us!

	Lets help you navigate the Web Content Accessibiliy Guidelines WCAG
	cover this type of stuff. In this case we are looking at:

	"Guideline 2.4 Navigable: Provide ways to help users navigate, find content,
	and determine where they are"

	But actually more specifically than that we are looking at the 'Success Criterion'
	of 2.4.4 which states:

	"The purpose of each link can be determined from the link text alone or from the 
	link text together with its programmatically determined link context, except 
	where the purpose of the link would be ambiguous to users in general."

	- https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-refs.html
	
	FML. How many times did you have to read that? Me too! ;-) They do tend to be 
	a little wordy and walk the line on plain and simple language if you consider 
	beginners to web development and I think we must. The peeps over there do a great 
	job and ultimatley they are trying to make these things as exact as possible so as to
	remove ambiguity which is essential for us, browser vendors and in a court of 
	law one would hope. Tough task, I empathise with them. 
	
	So it is exact but it cannot enguage the 'why'. Always look for the 'why', then 
	accessibility will become less 'tick box' and more thoughtful and though provoking.
	Lets have a go at rewriting it from the perspective of the user:

	"When reading out page links by themsleves I can get a good idea of where the link
	 will take me or what it will do if I select it. Unless it's something like a 
	 game of 'snap' where it would kindda of defeat the point of the game if I can see 
	 through the card. Obvs. ;-)"
	
	Put yourself in the position of that screen reader user... Do you really want 
	to piss yourself off but forcing yourself through needless hoops? Nah, don't do it!
	
	This type of inclusion approach will lead to a better experiance and a superiour 
	natural SEO if you care about such things.

	So, when you are building your next 'More Info' stylee link or whatever then provide 
	more context via some hidden text. That is what the .srOnly class is for. 

	<Button>More Information <span className="srOnly">on writing great link text</span></Button>

	If you are integrating into a CMS they you must ensure this is actually used by your 
	content authors or you do it progrmatically where possible which might not be as 
	good but in the real world sites degrade overtime. For internal pages you could 
	determine the page title programatically perhaps:

	<Button>More Information<span className="srOnly">: How to write great link text.</span></Button>
	
	This doesn't help us for external links so we really need a new breed of clever CMS, 
	with in CMS education and decent framing of the why. Continual auditing doesn't work,
	it's admirable but unless you are educating you are just gonna have the same issues 
	over and over.

	Make your shizzle accessible - it's your duty as a master builder ;-)

	@actionishope
/*

	We sourced this updated method from:

	Source: https://gist.github.com/ffoodd/000b59f431e3e64e4ce1a24d5bb36034
	Many thanks Gaël & Sylvain!
	
	----
	Improved screen reader only CSS class
	@author Gaël Poupard
		@note Based on Yahoo!'s technique
		@author Thierry Koblentz
		@see https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
	* 1.
		@note `clip` is deprecated but works everywhere
		@see https://developer.mozilla.org/en-US/docs/Web/CSS/clip
	* 2.
		@note `clip-path` is the future-proof version, but not very well supported yet
		@see https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
		@see http://caniuse.com/#search=clip-path
		@author Yvain Liechti
		@see https://twitter.com/ryuran78/status/778943389819604992
	* 3.
		@note preventing text to be condensed
		author J. Renée Beach
		@see https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
		@note Drupal 8 goes with word-wrap: normal instead
		@see https://www.drupal.org/node/2045151
		@see http://cgit.drupalcode.org/drupal/commit/?id=5b847ea
	* 4.
		@note !important is important
		@note Obviously you wanna hide something
		@author Harry Roberts
		@see https://csswizardry.com/2016/05/the-importance-of-important/
*/

:global(.srOnly) {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  /* 1 */
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  /* 2 */
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important;
  /* 3 */
}

/*
	Use in conjunction with .srOnly to only display content when it's focused.
	@note Useful for skip links 
	@see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
	@note Based on a HTML5 Boilerplate technique, included in Bootstrap
	@note Fixed a bug with position: static on iOS 10.0.2 + VoiceOver
		@author Sylvain Pigeard
		@see https://github.com/twbs/bootstrap/issues/20732
*/

:global(.srOnlyFocusable:focus),
:global(.srOnlyFocusable:active) {
  clip: auto !important;
  -webkit-clip-path: none !important;
  clip-path: none !important;
  height: auto !important;
  margin: auto !important;
  overflow: visible !important;
  width: auto !important;
  white-space: normal !important;
}
